package com.cms.service;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.xml.bind.attachment.AttachmentMarshaller;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Service;

import com.cms.basic.model.Pager;
import com.cms.basic.model.SystemContext;
import com.cms.core.dao.IAttachmentDao;
import com.cms.core.model.Attachment;

import net.coobird.thumbnailator.Thumbnails;
import net.coobird.thumbnailator.Thumbnails.Builder;
import net.coobird.thumbnailator.geometry.Position;
import net.coobird.thumbnailator.geometry.Positions;

@Service("attachmentService")
public class AttachmentService implements IAttachmentService {
	
	private IAttachmentDao attachmentDao;
	public final static String UPLOAD_PATH="/resources/upload/";
	public final static String INDEX_PIC_UPLOAD_PATH = "/resources/indexPic";
	private final static int IMAGE_WIDTH =900;
	private final static int THUMBNAIL_WIDTH =100;
	private final static int THUMBNAIL_HEIGH =80;
	
	
	public IAttachmentDao getAttachmentDao() {
		return attachmentDao;
	}
	
	@Resource(name="attachmentDao")
	public void setAttachmentDao(IAttachmentDao attachmentDao) {
		this.attachmentDao = attachmentDao;
	}
	
	public static void deleteAttachFiles(Attachment a, String folderLocation){
		
		String realPath = SystemContext.getRealPath();
		realPath +=folderLocation;
		String thumbnailPath = SystemContext.getRealPath()+folderLocation+"thumbnail/";
		System.out.println(realPath);
		System.out.println(thumbnailPath);
		new File(realPath + a.getNewName()).delete();
		new File(thumbnailPath+a.getNewName()).delete();
		
	}
	
	@Override
	public void add(Attachment attachment, InputStream is) throws IOException{
		
			attachmentDao.add(attachment);
			addFile(attachment, is);
		
	}

	@Override
	public void deleteAttachmentFile(int id) {
		Attachment a = attachmentDao.load(id);
		if(a==null) return;
		attachmentDao.delete(id);
		deleteAttachFiles(a);
		
	}

	@Override
	public Attachment load(int id) {
		return attachmentDao.load(id);
	}

	@Override
	public Pager<Attachment> findNoUsedAttachment() {
		return attachmentDao.findNoUsedAttachment();
	}

	@Override
	public void clearNoUsedAttachment() {
		attachmentDao.clearNoUsedAttachment();
	}

	@Override
	public List<Attachment> listByTopic(int tid) {
		return attachmentDao.listByTopic(tid);
	}

	@Override
	public List<Attachment> listIndexPic(int nums) {
		return attachmentDao.listIndexPic(nums);
	}

	@Override
	public Pager<Attachment> findChannelPic(int cid) {
		
		return attachmentDao.findChannelPic(cid);
	}

	@Override
	public List<Attachment> listAttachedByTopic(int tid) {
		return attachmentDao.listAttachedByTopic(tid);
	}
	
	
	private void addFile(Attachment a,InputStream is) throws IOException {
		//throw new IOException("test io exception");
		
		String realPath = SystemContext.getRealPath();
		//System.out.println(realPath);
		String path = realPath+"/resources/upload/";
		String thumbPath = realPath+"/resources/upload/thumbnail/";
		File fp = new File(path);
		File tfp = new File(thumbPath);
		path +=a.getNewName();
		thumbPath += a.getNewName();
		if(!fp.exists()) fp.mkdirs();
		if(!tfp.exists()) tfp.mkdirs();
		if(a.getIsImg()==1){
			BufferedImage oldBi = ImageIO.read(is); 
			int width = oldBi.getWidth();
			//BufferedImage bi =null;
			Builder<BufferedImage> bf = Thumbnails.of(oldBi);
			if(width>IMAGE_WIDTH){
				bf.scale((double)IMAGE_WIDTH/(double)width);
			}else{
				bf.scale(1.0f);
			}
			
			bf.toFile(path);
			//generate thumbnails
			BufferedImage tbi = Thumbnails.of(oldBi)
					.scale((THUMBNAIL_WIDTH*1.2)/width).asBufferedImage();
		//2、进行切割并且保持
			Thumbnails.of(tbi).scale(1.0f)
				.sourceRegion(Positions.CENTER, THUMBNAIL_WIDTH, THUMBNAIL_HEIGH)
				.toFile(thumbPath);
		}else{
			FileUtils.copyInputStreamToFile(is, new File(path));
		}
		
	}

	@Override
	public void updateAttachInfo(int aid) {
			Attachment attach = attachmentDao.load(aid);
			if(attach.getIsAttached()==0) {
				attach.setIsAttached(1);
			} else {
				attach.setIsAttached(0);
			}
			//attachmentDao.update(att);
	}
	
	@Override
	public void updateIndexPic(int aid){
		Attachment attach = attachmentDao.load(aid);
		if(attach.getIsAttached()==0) {
			attach.setIsIndexPic(1);
		} else {
			attach.setIsIndexPic(0);
		}
	}

}
