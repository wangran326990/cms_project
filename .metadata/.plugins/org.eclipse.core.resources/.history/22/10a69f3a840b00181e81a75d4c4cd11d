package com.cms.basic.dao;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.dbunit.DatabaseUnitException;
import org.dbunit.dataset.DataSetException;
import org.dbunit.dataset.IDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.orm.hibernate4.SessionHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import static org.junit.Assert.*;

import com.cms.basic.model.Pager;
import com.cms.basic.model.SystemContext;
import com.cms.basic.model.User;
import com.cms.basic.test.util.AbstractDbUnitTestCase;
import com.cms.basic.test.util.EntitiesHelper;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("/beans.xml")
public class TestUserDao extends AbstractDbUnitTestCase{
	@Resource(name="userDao")
	private IUserDao userDao;
	@Resource(name="sessionFactory")
	private SessionFactory sessionFactory;
	
	@Before
	public void setUp() throws DataSetException, SQLException, IOException{
		this.backupAllTable();
		Session s = sessionFactory.openSession();
		TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(s));

		
	}
//	 
	@Test
	public void testLoad() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		User u = userDao.load(1);
		System.out.println(u.getId() +"  "+ u.getUsername());
		//EntitiesHelper.assertUser(u);
		//System.out.println("test finished");
	}
	
	@Test
	public void testAdd(){
		User u = new User(9,"admin9");
		userDao.add(u);
		User u1 = userDao.load(9);
		//EntitiesHelper.assertUser(u1);
		
	}
//	
//	@Test(expected=ObjectNotFoundException.class)
//	public void testDelete(){
//		userDao.delete(1);
//		User tu = userDao.load(1);
//		assertNull(tu);
//	}
	
	@Test
	public void testListByArgs() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		List<User> users = userDao.list("from User where id>? and id<?", new Object[]{1,4});
		List<User> actual = Arrays.asList(new User(3,"admin3"), new User(2,"admin2"));
		EntitiesHelper.assertUsers(users, actual);
		
	}
	
	@Test
	public void  testListByArgsAndAlias() throws DatabaseUnitException, SQLException {
		// TODO Auto-generated method stub
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("asc");
		SystemContext.setSort("id");
		Map<String, Object> alias = new HashMap<String, Object>();
		alias.put("ids", Arrays.asList(1,2,3,4,5));
		List<User> actuals = userDao.list("from User where id>? and id<? and id in(:ids)", new Object[]{1,8}, alias);
		List<User> expect = Arrays.asList(new User(2,"admin2"), new User(3,"admin3"),new User(4,"admin4"), new User(5,"admin5"));
		EntitiesHelper.assertUsers(actuals, expect);
		

	}
	
	@Test
	public void testfindByArgs() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		SystemContext.setPageSize(3);
		SystemContext.setPageOffset(0);
		Pager<User> users = userDao.find("from User where id >= ? and id<?", new Object[]{1,8});
		List<User> actual = Arrays.asList(new User(7,"admin7"), new User(6,"admin6"), new User(5,"admin5"));
		assertNotNull(users);
		assertTrue(users.getTotal()==7);
		assertTrue(users.getDatas().size()==3);
		EntitiesHelper.assertUsers(users.getDatas(), actual);
		
	}
	
	@Test
	public void  testfindByArgsAndAlias() throws DatabaseUnitException, SQLException {
		// TODO Auto-generated method stub
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("asc");
		SystemContext.setSort("id");
		SystemContext.setPageSize(3);
		SystemContext.setPageOffset(1);
		Map<String, Object> alias = new HashMap<String, Object>();
		alias.put("ids", Arrays.asList(1,2,3,4,5));
		Pager<User> users = userDao.find("from User where id >= ? and id<? and id in(:ids)", new Object[]{1,8}, alias);
		List<User> expect = Arrays.asList(new User(2,"admin2"), new User(3,"admin3"), new User(4,"admin4"));
		assertNotNull(users);
		assertTrue(users.getTotal()==5);
		assertTrue(users.getDatas().size()==3);
		EntitiesHelper.assertUsers(users.getDatas(), expect);
		

	}
	
	
	@Test
	public void testListSQLByArgs() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		List<User> users = userDao.listUserBySql("select * from t_user where id >= ? and id<?", new Object[]{1,3}, User.class, true);
		List<User> actual = Arrays.asList(new User(2,"admin2"), new User(1,"admin1"));
		assertNotNull(users);
		EntitiesHelper.assertUsers(users, actual);
		
	}
	
	@Test
	public void testListSQLByArgsAndAlias() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		Map<String, Object> alias = new HashMap<String, Object>();
		alias.put("ids", Arrays.asList(1,2,3,4,5));
		List<User> users = userDao.listUserBySql("select * from t_user where id >= ? and id<? and id in(:ids)", new Object[]{1,3}, alias, User.class, true);
		List<User> actual = Arrays.asList(new User(2,"admin2"), new User(1,"admin1"));
		assertNotNull(users);
		EntitiesHelper.assertUsers(users, actual);
		
	}
	
	
	@Test
	public void testfindBySQLArgs() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		SystemContext.setPageSize(3);
		SystemContext.setPageOffset(0);
		Pager<User> users = userDao.findUserBySql("select * from t_user where id >= ? and id<? ", new Object[]{1,8}, User.class, true);
		List<User> actual = Arrays.asList(new User(7,"admin7"), new User(6,"admin6"), new User(5,"admin5"));
		assertNotNull(users);
		assertTrue(users.getTotal()==7);
		assertTrue(users.getDatas().size()==3);
		EntitiesHelper.assertUsers(users.getDatas(), actual);
		
	}
	
	@Test
	public void testfindBySQLArgsAndAlias() throws DatabaseUnitException, SQLException{
		IDataSet ds = createDateSet("t_user");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
		SystemContext.setOrder("desc");
		SystemContext.setSort("id");
		SystemContext.setPageSize(3);
		SystemContext.setPageOffset(0);
		Map<String, Object> alias = new HashMap<String, Object>();
		alias.put("ids", Arrays.asList(1,2,3,4,5));
		Pager<User> users = userDao.findUserBySql("select * from t_user where id >= ? and id<? and id in(:ids)", new Object[]{1,8}, alias, User.class, true);
		List<User> actual = Arrays.asList(new User(5,"admin5"), new User(4,"admin4"), new User(3,"admin3"));
		assertNotNull(users);
		assertTrue(users.getTotal()==5);
		assertTrue(users.getDatas().size()==3);
		EntitiesHelper.assertUsers(users.getDatas(), actual);
		
	}
	
	@After
	public void tearDown() throws FileNotFoundException, DatabaseUnitException, SQLException {
		SystemContext.setOrder("asc");
		SystemContext.setSort("id");
		SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
		Session s = holder.getSession(); 
		s.flush();
		TransactionSynchronizationManager.unbindResource(sessionFactory);
		this.resumeTable();
	}
	
	
}
