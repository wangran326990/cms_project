package com.cms.core.dao;

import static org.junit.Assert.*;

import java.io.IOException;
import java.sql.SQLException;

import javax.annotation.Resource;

import org.dbunit.DatabaseUnitException;
import org.dbunit.dataset.IDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.orm.hibernate4.SessionHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import com.cms.basic.model.Pager;
import com.cms.basic.model.SystemContext;
import com.cms.core.model.Topic;
import com.cms.core.test.util.AbstractDbUnitTestCase;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("/test-beans-core.xml")
public class TestTopicDao extends AbstractDbUnitTestCase{
	@Resource(name="sessionFactory")
	private SessionFactory sessionFactory;
	
	@Resource(name="topicDao")
	private TopicDao topicDao;
	@Before
	public void setUp() throws SQLException, IOException, DatabaseUnitException{
		this.backupAllTable();
		Session s = sessionFactory.openSession();
		TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(s));
		IDataSet ds = createDateSet("topic");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon, ds);
	
	}
	
	
	@After
	public void tearDown() throws Exception {
		SystemContext.setOrder("asc");
		SystemContext.setSort("id");
		SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
		Session s = holder.getSession(); 
		s.flush();
		TransactionSynchronizationManager.unbindResource(sessionFactory);
		this.resumeTable();
	}

	@Test
	public void testFind() {
		//System.out.println("update database");
		Pager<Topic> expectedTopics = topicDao.find(1, 7, null, null);
		assertEquals(1, expectedTopics.getTotal());
	}
	
	@Test
	public void testSearchTopicByKeyword(){
		Pager<Topic> ts = topicDao.searchTopicByKeyword("aaa");
		assertEquals(1,ts.getTotal());
	}
	
	@Test
	public void testSearchTopic(){
		Pager<Topic> ts = topicDao.searchTopic("fff");
		assertEquals(1, ts.getTotal());
	}
	
	@Test
	public void testSearchTopicByRecommend(){
		Pager<Topic> ts = topicDao.findRecommandTopic(8);
		assertEquals(0, ts.getTotal());
	}
	
	@Test
	public void testDeleteTopic(){
		int tid = 1;
		topicDao.deleteTopic(tid);
	}

}
