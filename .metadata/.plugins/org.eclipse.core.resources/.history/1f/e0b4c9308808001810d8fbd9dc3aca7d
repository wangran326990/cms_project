package com.cms.web.controllers;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.annotation.Resources;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FilenameUtils;
import org.hibernate.type.ImageType;
import org.jboss.logging.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cms.auth.AuthClass;
import com.cms.auth.AuthMethod;
import com.cms.core.model.Attachment;
import com.cms.core.model.ChannelTree;
import com.cms.core.model.Topic;
import com.cms.core.model.User;
import com.cms.dto.AjaxObj;
import com.cms.dto.TopicDto;
import com.cms.service.ChannelService;
import com.cms.service.IAttachmentService;
import com.cms.service.IChannelService;
import com.cms.service.IKeywordService;
import com.cms.service.ITopicService;
import com.google.gson.Gson;

@Controller
@AuthClass("login")
@RequestMapping("/admin/topic")
public class TopicController {
	private ITopicService topicService;
	private IChannelService channelService;
	private IKeywordService keywordService;
	private IAttachmentService attachmentService;
	/**
	 * avaliable img types
	 */
	private final static List<String> imgTypes = Arrays.asList("jpg","jpeg","gif","png");
	public ITopicService getTopicService() {
		return topicService;
	}
	
	@Resource(name="topicService")
	public void setTopicService(ITopicService topicService) {
		this.topicService = topicService;
	}
	
	public IChannelService getChannelService() {
		return channelService;
	}
	
	@Resource(name="channelService")
	public void setChannelService(IChannelService channelService) {
		this.channelService = channelService;
	}
	
	public IKeywordService getKeywordService() {
		return keywordService;
	}
	
	@Resource(name="keywordService")
	public void setKeywordService(IKeywordService keywordService) {
		this.keywordService = keywordService;
	}
	
	public IAttachmentService getAttachmentService() {
		return attachmentService;
	}

	@Resource(name="attachmentService")
	public void setAttachmentService(IAttachmentService attachmentService) {
		this.attachmentService = attachmentService;
	}
	
	private void initList(String con,Integer cid,Model model,HttpSession session,Integer status) {
			boolean isAdmin = (Boolean)session.getAttribute("isAdmin");
			if(isAdmin){
				model.addAttribute("datas", topicService.find(cid, con, status));
				model.addAttribute("cs", channelService.listChannelsByStatus(-1));
			}else{
				User loginUser = (User)session.getAttribute("loginUser");
				model.addAttribute("datas", topicService.find(loginUser.getId(), cid, con, status));
				model.addAttribute("cs", channelService.listChannelsByStatus(-1));
			
			}
			
			if(con==null) con="";
			model.addAttribute("con", con);
			model.addAttribute("cid",cid);
	}

	@RequestMapping("/audits")
	@AuthMethod(role="ROLE_PUBLISHER,ROLE_AUDIT")
	public String auditList(@RequestParam(required=false) String con,@RequestParam(required=false) Integer cid,Model model,HttpSession session) {
		this.initList(con, cid, model, session, 1);
		return "topic/list";
	}
	
	@RequestMapping("/unaudits")
	@AuthMethod(role="ROLE_PUBLISHER,ROLE_AUDIT")
	public String unauditList(@RequestParam(required=false) String con,@RequestParam(required=false) Integer cid,Model model,HttpSession session) {
		initList(con, cid, model, session,0);
		return "topic/list";
	}
	
	@RequestMapping("/changeStatus/{id}")
	@AuthMethod(role="ROLE_AUDIT")
	public String changeStatus(@PathVariable int id,Integer status) {
		topicService.updateStatus(id);
		if(status==0){
			return "redirect:/admin/topic/audits";
		}else{
			return "redirect:/admin/topic/unaudits";
		}
	}
	
	@RequestMapping("/delete/{id}")
	@AuthMethod(role="ROLE_PUBLISHER")
	public String delete(@PathVariable int id,Integer status) {
		topicService.delete(id);
		if(status==0){
			return "redirect:/admin/topic/audits";
		}else{
			return "redirect:/admin/topic/unaudits";
		}
	}
	
	
	@RequestMapping(value="/add",method=RequestMethod.GET)
	@AuthMethod(role="ROLE_PUBLISHER")
	public String add(Model model) {
		Topic t = new Topic();
		t.setPublishDate(new Date());
		TopicDto td = new TopicDto(t);
		model.addAttribute("topicDto",td);
		model.addAttribute("cs", channelService.listChannelsByStatus(-1));
		return "topic/add";
	}
	
	@RequestMapping(value="/add", method=RequestMethod.POST)
	public String add(@Validated TopicDto topicDto, BindingResult br,String[] aks, Integer[] aids, HttpSession session){
			if(br.hasErrors()){
				return "topic/add";
			}
			
			Topic t= topicDto.getTopic();
			User loginUser = (User)session.getAttribute("loginUser");
			StringBuffer keys=new StringBuffer();
			if(aks!=null && aks.length!=0){
				for(String keyword : aks){
					keys.append(keyword);
					keys.append('|');
					keywordService.addOrUpdate(keyword);
				}
				t.setKeyword(keys.substring(0, keys.length()-1));
			}
			topicService.add(t, topicDto.getCid(), loginUser.getId(), aids);
			return "redirect:/jsp/common/addSuc.jsp";
			
	}
	
	
	
//	@RequestMapping(value="/add",method=RequestMethod.POST)
//	public String add(BindingResult br,String[]aks,Integer[] aids,HttpSession session) {
//		System.out.println(aks);
//		return null;
//	}
	
	@RequestMapping(value="/update/{id}",method=RequestMethod.GET)
	@AuthMethod(role="ROLE_PUBLISHER")
	public String update(@PathVariable int id,Model model) {
		Topic t = topicService.load(id);
		TopicDto td = new TopicDto(t);
		String[] keywords=null;
		 if(t.getKeyword()!=""){
			 keywords = t.getKeyword().split("\\|");
			 System.out.println(keywords);
		 }
		model.addAttribute("topicDto", td);
		model.addAttribute("cs", channelService.listChannelsByStatus(-1));
		model.addAttribute("cid", t.getChannel().getId());
		model.addAttribute("keywords",keywords);
		model.addAttribute("atts", attachmentService.listByTopic(id));
		return "topic/update";
	}
	
	@RequestMapping(value="/update/{id}",method=RequestMethod.POST)
	public String update(@Validated TopicDto topicDto, @PathVariable int id,BindingResult br,String[]aks,Integer[] aids,HttpSession session) {
		if(br.hasErrors()){
			return "redirect:/admin/topic/update/"+id;
		}
		Topic t= topicDto.getTopic();
		User loginUser = (User)session.getAttribute("loginUser");
		StringBuffer keys=new StringBuffer();
		if(aks!=null && aks.length!=0){
			for(String keyword : aks){
				keys.append(keyword);
				keys.append('|');
				keywordService.addOrUpdate(keyword);
			}
			t.setKeyword(keys.substring(0, keys.length()-1));
		}
		topicService.add(t, topicDto.getCid(), loginUser.getId(), aids);
		return "redirect:/jsp/common/addSuc.jsp";
		
	}
	
	@RequestMapping("/{id}")
	public String show(@PathVariable int id,Model model) {
		model.addAttribute("topic",topicService.load(id));
		model.addAttribute("atts", attachmentService.listByTopic(id));
		return "topic/show";
	}
	
	
	
	@RequestMapping(value="/searchKeyword")
	@AuthMethod(role="ROLE_PUBLISHER")
	public @ResponseBody List<String> searchKeyword(@Param String term) {
		return keywordService.listKeywordByCon(term);
	}
	
	@RequestMapping(value="/upload",method=RequestMethod.POST)//返回的是json类型的值，而uploadify只能接受字符串
	@AuthMethod(role="ROLE_PUBLISHER")
	public void upload(MultipartFile attach,HttpServletResponse resp) throws IOException {
	//System.out.println(attach.getOriginalFilename());
		resp.setContentType("test/plain;charset=utf-8");
		resp.setContentType("text/plain");
		AjaxObj ao = null;
		Gson gson = new Gson();
		//AjaxObj aj = new AjaxObj();
		try {
	//		resp.getWriter().write(resultJson);
			
			Attachment att = new Attachment();
			String ext = FilenameUtils.getExtension(attach.getOriginalFilename());
			att.setIsAttached(0);
			if(imgTypes.contains(ext)) att.setIsImg(1);
			else att.setIsImg(0);
			att.setIsIndexPic(0);
			att.setNewName(String.valueOf(new Date().getTime())+"."+ext);
			att.setOldName(FilenameUtils.getBaseName(attach.getOriginalFilename()));
			att.setSuffix(ext);
			att.setType(attach.getContentType());
			att.setTopic(null);
			att.setSize(attach.getSize());
			attachmentService.add(att, attach.getInputStream());
			System.out.println(att.getId());
			ao =  new AjaxObj(1,null, att);
		} catch (IOException e) {
			e.printStackTrace();
			ao = new AjaxObj(0, e.getMessage());
		}
		
		
		String resultJson = gson.toJson(ao);
		resp.getWriter().write(resultJson);
	}
	
	@RequestMapping("/treeAll")
	@AuthMethod(role="ROLE_PUBLISHER")
	public @ResponseBody List<ChannelTree> tree(HttpSession session) {
		return channelService.generateTree();
	}

	
		
}
