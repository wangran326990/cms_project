package com.cms.web.controllers;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cms.core.model.Attachment;
import com.cms.core.model.IndexPic;
import com.cms.dto.AjaxObj;
import com.cms.service.IAttachmentService;
import com.cms.service.IIndexPicService;
import com.google.gson.Gson;

@Controller
@RequestMapping("/admin/pic")
public class IndexPicController {
	private IIndexPicService indexPicService;
	private IAttachmentService 	attachmentService;
	
	public final static String FILE_PATH="/resources/indexPic";
	public final static int T_W = 120;
	
	@RequestMapping("/indexPics")
	public String listIndexPic(Model model){
		model.addAttribute("datas", indexPicService.findIndexPic());
		return "pic/listIndexPic";
	}
	
	
	@RequestMapping(value="/addIndexPic",method=RequestMethod.GET)
	public String addIndexPic(Model model){
		IndexPic ip = new IndexPic();
		ip.setStatus(1);
		model.addAttribute("indexPic", ip);
		return 	"pic/addIndexPic";
	}
	
	@RequestMapping(value="/uploadIndexPic")
	public void uploadIndexPic(MultipartFile pic, HttpServletResponse resp,HttpSession session) throws IOException{
		resp.setContentType("text/plain;charset=utf-8");
		AjaxObj ao = new AjaxObj();
		PrintWriter out = null;
		try {
			out = resp.getWriter();
			String oldName = pic.getOriginalFilename();
			String newName = new Date().getTime()+"."+FilenameUtils.getExtension(oldName);
			String realPath = session.getServletContext().getRealPath("");
			File f = new File(realPath+FILE_PATH+"/temp");
			System.out.println(realPath+FILE_PATH+"/temp");
			if(!f.exists()) {
				f.mkdirs();
			}
			BaseInfo baseInfo = (BaseInfo)session.getServletContext().getAttribute("baseInfo");
			double w = baseInfo.getIndexPicWidth();
			double h = baseInfo.getIndexPicHeight();
			BufferedImage bi = ImageIO.read(pic.getInputStream());
			double nw = bi.getWidth();
			double nh = bi.getHeight();
			if(nw>w&&nw/nh<w/h) {
				//图片的大小符合要求
				//判断是否进行缩放
				Builder<BufferedImage> b = Thumbnails.of(bi);
				if(nw-w>150) {
					b.scale((w+150)/nw);
				} else {
					b.scale(1.0);
				}
				BufferedImage bi2 = b.asBufferedImage();
				b.toFile(realPath+FILE_PATH+"/temp/"+newName);
				IndexPicDto ipd = new IndexPicDto();
				ipd.setNewName(newName);
				ipd.setOldName(oldName);
				ipd.setIndexPicHeight(new Double(h).intValue());
				ipd.setIndexPicWidth(new Double(w).intValue());
				ipd.setImgWidth(bi2.getWidth());
				ipd.setImgHeight(bi2.getHeight());
				ao.setObj(ipd);
				ao.setResult(1);
			} else {
				ao.setResult(0);
				ao.setMsg("图片的尺寸不在有效范围中");
			}
			
		} catch (IOException e) {
			ao.setResult(0);
			ao.setMsg(e.getMessage());
		}
		out.println(JsonUtil.getInstance().obj2json(ao));
		out.flush();
	}

	public IIndexPicService getIndexPicService() {
		return indexPicService;
	}

	@Resource(name="indexPicService")
	public void setIndexPicService(IIndexPicService indexPicService) {
		this.indexPicService = indexPicService;
	}


	public IAttachmentService getAttachmentService() {
		return attachmentService;
	}

	@Resource(name="attachmentService")
	public void setAttachmentService(IAttachmentService attachmentService) {
		this.attachmentService = attachmentService;
	}


	
}
